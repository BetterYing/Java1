static：
1.修饰一个成员变量/属性
        和对象无关，和类相关。(无论这个类存在多少个对象，静态成员变量只存在一份)
        类属性。
        
2.修饰一个方法
        这个方法和类相关，和具体对象不相关。
        静态方法中不能使用this。
 
        一个方法或者属性要不要加static，具体问题具体分析。


3.修饰一个代码块
        a)静态代码块会最先执行
        b）不管new多少个对象，静态代码块只执行一次。



4.修饰一个类（后面讲）




对于静态成员来说，在普通方法中也能访问，静态方法也能访问，静态代码块/普通代码块中访问。
对于普通成员变量来说，普通方法中能访问，静态方法中不能访问。只能在普通代码块中访问。




JVM内存分成若干个区域
JVM栈 局部变量 引用
堆 new出来的对象



所谓的面向对象，其实算是一种“编程思想”（方法论），提供了一系列的常用的办法来组织和编写代码。
包含一些经典的重要的招式。
其中最重要的“封装”，“继承”，“多态”，面向对象最重要的三大特性。
面向对象中还有一些其他特性，例如：抽象，组合，反射.......





封装：C语言中的函数也可以理解成是一种封装，让调用者不必太多的关注实现的细节。
Java面向对象中的封装也是类似，类的使用者不必太多关注类的实现细节。
封装是为了让类的使用者调用更方便，



Java中的封装是如何体现？
private 关键字 =》public
public修饰的属性或方法，既能在类内使用，也能在类外使用（既能给实现者使用，也能给调用者使用）
private 修饰的属性或方法，通常情况下，只能在类内部使用，不能在类外部使用。

当我们把属性加上private关键字修饰时，此时在类的外部无法直接使用，但是可以在类的外部调用类的public的方法，然后让public方法内部来使用这个private变量



Java中，推荐把类的所有属性都设成private，类的方法哪些要private哪些要pubic需要具体问题具体分析。

当我们提供了get和set方法的时候，其实就和public差不多了。
要求所有的属性都设为private，但是不一定所有的属性都提供get和set方法。

IDEA提供了自动生成get set方法：alt+insert -》getter/setter



Java的类如果用户没写构造方法，那么会自动生产一个无参的构造方法。
构造方法能够支持重载，一个类可能存在多个构造方法，多个构造方法之间可以互相调用。
this关键字可以去调用构造方法。this（）；



任何类，内部都已经有了一个toString方法，这个方法默认的行为是得到出这个类的类型和身份。我们可以手动修改toString的行为，让我们的对象按照需要的情况返回出合适的字符串。

toString其实是一个Object这样类的方法，
Object是所有类的祖宗，所有的类都是直接或间接的“继承”自Object。



我们所谓的时间复杂度关注的程序运行的快慢（时间上的效率）
空间复杂度程序运行时占用的内存/外存的空间是多少。

衡量的是一段代码的效率，这段代码在什么样的机器上执行，什么样的环境上执行，不确定。
如果一段代码中，存在一些基本操作，如果这样的基本操作重复次数越多，就可以认为代码执行的越慢。




数组顺序查找时间复杂度O(N)；
N：表示元素个数。
O(N):表示基本操作大概执行多少次。


O渐进表示法，只是关注基本操作执行次数的数量级，不必算的很精确。

如果最高阶项带系数，也不要系数。

只关注数量级，而不关注具体的精确的次数。


O（1）的程序运行时间不一定就比O（N）的程序运行时间短。


冒泡排序时间复杂度是O(N^2)。
二分查找时间复杂度O(logN)。























